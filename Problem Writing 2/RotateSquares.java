public class RotateSquares {

    // write your code here

    public static void main(String[] args) {
        Turtle t = new Turtle();
        row(t, 50, 4, 35);
    }

    public static void square(Turtle t, double length){
        for(int i = 0; i<4; i++){
            t.forward(length);
            t.left(90);
        }
    }

    public static void row(Turtle t, double length, int numSquares, double angle){
        t.left(angle);
        for(int i = 0; i<numSquares; i++){
            square(t, length);
            t.forward(length);
        }
        t.backward(numSquares*length);
        t.right(angle);
    }

}

/*

<question>
<title>RotateSquares</title>
<type>JavaCode</type>
<points>0</points>
<text>
Write a method that can draw a row of connected squares of a given length and rotated at a given angle. The number of squares in the stack is also variable. At the end, returnt the turtle to it's original position and orientation. The given figure has four squares, a side length of 50, and an angle of 35 degrees.
</text>
<figure>
iVBORw0KGgoAAAANSUhEUgAAA+oAAAL2CAYAAADW/WyGAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAJOgAACToAYJjBRwAACJlSURBVHhe7djhduQmuobR3P9N56TnjKa/dlS2
qgToBfZeSz9it20VIMSTv/4GAAAAYgh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEA
ACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAA
gCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAA
ggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAI
ItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCI
UAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBC
HQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1
AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQB
AAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcA
AIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAA
AIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAA
CCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAg
iFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAg
Qh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIII
dQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLU
AQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAH
AACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0A
AACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAA
AAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAA
IIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAKL89ddf/7sAdmT3AwAg
ilAHdmf3AwDgMTXKz+L87GsAq7PrAQDwmBroZ1F+9jWA1dn1AAB4TA30syg/+xrA6ux6AAAMdzXA
hTqwI7seAADDCXWA1+x6AAAMcUT3J+F952cBZmOnAwBgiDuxfednAWZjpwMAYIg7sX3nZwFmY6cD
AKC5GtatA7v17wNIY4cDAKC5Guitw7r17wNIY4cDAKCZkRF9/C3RDqzGrgYAQDNCHeA+uxoAAM0I
dYD77GoAAHykhvITwfzU3wXoza4GAMBHaig/EcxP/V2A3uxqAABclhrHgh1Yid0MAIDLhDpAf3Yz
AAAuE+oA/dnNAAA4VaN8lhCe6V4BXrGDAQBwqkbvLPE7070CvGIHAwDgDzOHrlAHVmAHAwDgD0Id
4Fl2MAAA/iDUAZ5lBwMAYMnAFezArOxcAAAIdYAgdi4AgM3UKN8hZnf5nMA67FYAAJup4bpDwO7y
OYF12K0AADZTw3WHgN3lcwLrsFsBAGxi11gV6sBs7FYAAJsQ6o6+wBzsVgAAC6pxKlJ/MxbADOxS
AAALqoEuTn8zFsAM7FIAAAuqgS5OfzMWwAzsUgAAixDl1xkrIJmdCQBgEeLzOmMFJLMzAQBMTnDe
Y/yANHYkAIDJCc17jB+Qxo4EADA5oXmP8QPS2JEAACZyRGW9uMc4AmnsSAAAE6mBLjDbMI5AGjsS
AEA4UT6GcQZS2IUAAMIJyDGMM5DCLgQAEE5AjmGcgRR2IQCAIDUWReNzjD3wJLsPAECQGuhi8TnG
HniS3QcAIIAwzGI+gCfZfQAAAgjDLOYDeJLdBwAggDDMYj6AJ9l9AAAecsSgIMxljoAn2HEAAB4i
AvOZI+AJdhwAgAFq8Am/OZk3YBQ7DQDAADXQBd+czBswip0GAGCAGuiCb07mDRjFTgMA0JG4W88x
p+YV6MXuAgDQkaBbj1AHerO7AAA0UgNOyK3L/AK92V0AABqpASfk1mV+gd7sLgAAjdSAE3LrMr9A
b3YXAIAbRNvezD3Qg10FAOAGob43cw/0YFcBALioRrlAo7ImgJbsJAAAF9UYE2VU1gTQkp0EAOCi
GmOijMqaAFqykwAA/ECA8ROhDrRkJwEA+IEA4ydCHWjJTgIAcEJ48SnrBrjLDgIAcEKo8ynrBrjL
DgIAcEKo8ynrBrjLDgIAbK9GuciiFesJ+JRdAwDYXg0qYUUr1hPwKbsGALAtEcUo1hrwDrsFALAt
8cQo1hrwDrsFALAt8cQo1hrwDrsFALCFI5TqdTj7GrRkfQHvsFsAAFuoMf41ms6+Bi1ZX8A77BYA
wLKuBvjVfwd3WWvAFXYIAGBZV6Po6r+Du6w14Ao7BACwrKtRdPXfwV3WGnCFHQIAWM6dEBJRjGKt
Aa/YGQCA5dwJIPHEKNYa8IqdAQCY2hE79Wqh9e+Dr6wv4BU7AwAwtRrULcOn9e+Dr6wv4BU7AwAw
tRrULcOn9e+Dr6wv4BU7AwAwndERLajoafR6BvLZDQCA6YwOGxFFT6PXM5DPbgAARKsR81TMPPV3
2Y+1BvxiFwAAoh3hUq/Rnvq77MdaA36xCwAA0Y5wqddoT/1d9mOtAb/YBQCASInBctyTkKIX6wv4
xS4AAERKDJbjnoQUvVhfwC92AQDgcTWAZwmVWe6TOc30LADtefIBgMfVKJklTma5T+Y007MAtOfJ
BwAeV6NkljiZ5T6Z00zPAtCeJx8AeMTsISKiGMVag/144gGARxzxMWuAiCdGsdZgP554AGCo1aLj
+DxCit6sNdiHpxwAGGq10BBPjGKtwT485QDAUKuFhnhiFGsN9uEpBwC6qWGxQ2Ds8Bl5zi7PESDU
AYCOaljsEBg7fEaes8tzBAh1AKCxnWNCRDGKtQZr83QDAE0dAbFjRIgnRrHWYG2ebgCgqSMgdowI
8cQo1hqszdMNAHzsiIV6sff/rKC9up6sK9iDpxwA+JiAOGc8aKmuJ+sK9uApBwDeJhauM1Z84lg3
1g7syZMPALxNQFxnrPjEsW6sHdiTJx8AeJuAuM5Y8Ylj3Vg7sCdPPgBwiXC4x/hxhTUC/GIXAAAu
EZr3GD+usEaAX+wCAMC/1KgUDm0YS76qa8LaACq7AQDwLwKiPWPJV3VNWBtAZTcAAP5FQLRnLPmq
rglrA6jsBgDA/4iFMYzzvo65N//Ad+wQAMD/CIgxjPO+jrk3/8B37BAAsKkaDMLhGcZ+bXV+zTPw
DrsFAGxKRDzP2K+tzq95Bt5htwCATYmI5xn7tdX5Nc/AO+wWALARwZDFfKzJnAJ32UEAYCPCMIv5
WJM5Be6ygwDABoRDPnM0p2Pe6gVwl50EADYgIPKZozkd81YvgLvsJACwAQGRzxzN6Zi3egHcZScB
gMUIh7mZt3zmCOjN7gIAi6kRISbmY97ymSOgN7sLACxAOKzJnGYxH8AodhoAWMARECJiLeY0i/kA
RrHTAMACjoAQEWsxp1nMBzCKnQYAJnPEQr1Yk/l9Tn2+zAMwmh0HACYjIPZhfp9Tny/zAIxmxwGA
SYiFfYnFMYwzkMIuBACTEBD7EpBjGGcghV0IACYhIPYlIMcwzkAKuxAABKrBIByorIc26rNlTIE0
diQACCQieMV6aKM+W8YUSGNHAoAQgoErrJF7jB8wA7sUAIQ4AkJE8B1r5B7jB8zALgUAIY6AEBF8
xxq5x/gBM7BLAcDDhAOfONaNtfNaHSNjBczEbgUADxMQfEJ8/qyOkbECZmK3AoCBhAM9WEu/1WfL
uACzsnMBwEAigh6spd/qs2VcgFnZuQBgIBFBD9bSb/XZMi7ArOxcANCZYGCUndeaZwxYid0MADrb
OZ4Ya+e15hkDVmI3A4CGaiidhcPZ16CVV+tuNfVz7vB5gf3Y1QCgoZ8C4uxr0Mqrdbea+jl3+LzA
fuxqANDQTwFx9jVo5dW6W039nDt8XmA/djUAaOBqLIgKRlltrR2fx/MD7MBOBwANXA0IocEoq621
4/N4foAd2OkA4E01GD4Nhzs/C++Yca3Ve57t3gFasOsBwJtaRMSdn4V3zLjW6j3Pdu8ALdj1AOBN
LSLizs/CO2Zca/WeZ7t3gBbsegBwQc9gECL01HPttlbvdZZ7BujB7gcAF/QMB0FCTz3Xbmv1Xme5
Z4Ae7H4A8MVTsTD677GfpPVV13vSfQEksCMCwBdPBcTov8d+ktZXXe9J9wWQwI4IAF88FRCj/x77
SVpfdb0n3RdAAjsiAPzX07EgWBjlqbVW/+4Tfx9gFnZHAPivp8NBvDDKU2ut/t0n/j7ALOyOAGwt
NRhEDD2NXvfWM8B77JgAbG10sFwlbOhp9Lq3ngHeY8cEYGujg+UqYUNPo9e99QzwHjsmANuocTJL
OMx0r8yp9fqqa7b17wbYhZ0TgG3MGBAz3Stzar2+6ppt/bsBdmHnBGB5M8eC2GGUO2vtzs8C8G92
UwCWN3NACCBGubPW7vwsAP9mNwVgeTMHhABilDtr7c7PAvBvdlMAllKDYbVwWO3zkOu7tXZ8r14A
tGVnBWApK0fEap+HXN+tteN79QKgLTsrANPbLRh2+7yMd7a+6ro7+z4A7dhhAZjebuGw2+dlvLP1
Vdfd2fcBaMcOC8D0dguH3T4v452tr7ruzr4PQDt2WACmIhaEOv3VNWatAYxn1wVgKgJCqNNfXWPW
GsB4dl0ApiAWzhkXWjnWUr0AeIYdGIApCIdzxoVWjrVULwCeYQcGYArC4ZxxoZVjLdULgGfYgQGI
IxjeZ6z4lHUDkMeuDECcGp0i4hpjxaesG4A8dmUAIgjNdowjr9TnzDoByGV3BiCCcGjHOPJKfc6s
E4BcdmcAIgiHdowjr9TnzDoByGV3BmA4sdCXMaWqz5m1ATAHOzUAwwmHvowpVX3OrA2AOdipARhG
JIwlzPZT59zcA8zL7g3AMMJhLLG2nzrn5h5gXnZvAIYRDmOJtf3UOTf3APOyewPQhWDIYg7WVp8z
cw0wP7s4AF0IhyzmYG31OTPXAPOziwPQjEjIZV7WUZ8z8wqwJjs7AM0Ih1zmZR31OTOvAGuyswPQ
jHDIZV7WUZ8z8wqwJjs7AB8RC3MyX3Oq82b+ANZnlwfgI8JhTuZrTnXezB/A+uzyALxFJKzDXOYz
RwB7svMD8BbhsA5zmc8cAezJzg/AW4TDOsxlPnMEsCc7PwA/OmJBMKzJ/Gao82A+APbmDQDAj4TD
2sxvhjoP5gNgb94AAPxBLOzHXD+njr05AODgbQDAH4TDfsz1c+rYmwMADt4GAPxBOOzHXD+njr05
AODgbQDAf4gEfrEO+jnGtl4AcMYbAoD/EA78Yh30c4xtvQDgjDcEwIYEAz+xNtqpY2lMAbjCmwJg
Q8KBn1gb7dSxNKYAXOFNAbAh4cBPrI126lgaUwCu8KYA2IRI4B3Wy2fquBk/AD7l7QGwCeHAO6yX
z9RxM34AfMrbA2BBYoGWrKHv1efMWAHQgjcJwIKEAy1ZQ9+rz5mxAqAFbxKABQkHWrKGvlefM2MF
QAveJAALEQn0JET/VMfDuADQkjcKwELEAj0J0j/V8TAuALTkjQIwqe8i4exr0NJu66s+U7t9dgDG
85YBmNR34XD2NWhpt/VVn6ndPjsA43nLAEzqu3A4+xq0tNv6qs/Ubp8dgPG8ZQAmcjUSrv47+NQO
66s+Rzt8XgByeOMATORqMFz9d/CpHdZXfY52+LwA5PDGAZjAnUgQGPR0rK/Z11j9HCt8HgDm5i0E
MIE74SA66OlYX7Ovsfo5Vvg8AMzNWwhgAnfCQXTQ07G+Zl9j9XOs8HkAmJu3EECYXsHQ+vfBVzOu
r/pczHj/AKzJ2wggTK9waP374KsZ11d9Lma8fwDW5G0EEGB0JAgSekhfV8f9nV0AkMSbCSDA6GAQ
J/SQvq6O+zu7ACCJNxNAgNHBIE7oIX1dHfd3dgFAEm8mgMESIuGpv8senlzbX9V7SbknAPiJtxXA
YAnh8NTfZQ9Pru2v6r2k3BMA/MTbCmCQxEgQL/T21Pqqa/upewCAT3lrAQySGAsiht6eWl91bT91
DwDwKW8tgEESY0HE0NtT66uu7afuAQA+5a0F0MGMkTDLfTKXEevq+Bv1AoCZeZMBdDBjOMxyn8xl
xLo6/ka9AGBm3mQAjcweCQKHnlo/H/X3tfy9AJDAWw2gkdmDQezQU+vno/6+lr8XABJ4qwE0Mnsw
iB16av181N/X8vcCQAJvNYCbVosE4UNv766vuibf/VkAmJE3HcBNq4WDGKK3d9dXXZPv/iwAzMib
DuANuwXDDp+R5/z0HNXvf/fvAGA13ngAb9gtHHb4jDznp+eofv+7fwcAq/HGA3jDbuGww2fkOT89
R/X73/07AFiNNx7AD3aOBHFET2fPVv3a1+8BwC68/QB+sHMwCCV6Onu26te+fg8AduHtB1CIhHPG
gx7qurK+AOA3b0SAQjicMx70UNeV9QUAv3kjAhTC4ZzxoIe6rqwvAPjNGxHgHyLhOmPFXccaqhcA
8Js3I8A/xMJ1xoq7jjVULwDgN29GYFsi4R7jxxV1nVgvAHCNtyWwLeFwj/HjirpOrBcAuMbbEtiW
cLjH+HFFXSfWCwBc420JbEEstGcseaWuDWsEAN7nzQlsQTi0Zyx5pa4NawQA3ufNCSxNJIxhnPd1
zH29AIB7vE2BpQmHMYzzvo65rxcAcI+3KbA04TCGcd7XMff1AgDu8TYFliEYnmfs91Hn2pwDQFve
qsAyhMPzjP0+6lybcwBoy1sVmJpIyGI+1mZ+AWAMb1pgasIhi/lYm/kFgDG8aYGpCYcs5mNt5hcA
xvCmBaYkFvKZo7kd81cvAGAMb11gSsIhnzma2zF/9QIAxvDWBeIJhrmZt7nU+TJvAPAMb18gnnCY
m3mbS50v8wYAz/D2BeIJh7mZt7nU+TJvAPAMb18gkkhYkznNUp8zcwMAObyRgUjCYU3mNEt9zswN
AOTwRgYeJxb2YX6fV58z8wEAmbydgccJh32Y3+fV58x8AEAmb2fgccJhH+b3efU5Mx8AkMnbGXiM
SNiXSByjjrPxBoB5eGMDjxEO+xKOY9RxNt4AMA9vbGAIwcAr1kN79TkzvgAwH29uYAjhwCvWQ3v1
OTO+ADAfb25gCOHAK9ZDe/U5M74AMB9vbqAbkcAV1kgbnjcAWIe3OdCNcOAKa6QNzxsArMPbHGhO
LPAJoXldHStjBgDr8WYHmhMOfEJ0XlfHypgBwHq82YHmhAOfEJ3X1bEyZgCwHm924BbBQA/W0jnj
AgB78LYHbjnCoV5wl7V0zrgAwB687YG3HbEgGOht57VWP/uuYwAAu/LWB94mHBhl57VWP/uuYwAA
u/LWB94mHBhl57VWP/uuYwAAu/LWB24REPS0W6Tu9nkBgHNOAsAtooKedgvX3T4vAHDOSQC4RVQw
ympr7fg89QIA+MWpALhFYDDKamvt+Dz1AgD4xakAuEVgMMpqa+34PPUCAPjFqQBoQmwwyuxrzXMC
APzESQFoYvZ4Yh6zrzXPCQDwEycFoDkhQk/H+pphjdV7neWeAYDnOTEAzQkSepopeuu9znLPAMDz
nBiA5gQJPc0UvfVeZ7lnAOB5TgxAN+KE3hLXV133ifcHAORzegC6ESr0lri+6rpPvD8AIJ/TA9CN
UGGUhLVmrQMArThRAN0kxBN7SFhr1joA0IoTBdBNQjyxh4S1Zq0DAK04UQBDiBh6OtbXqDVW/97I
vwsA7MHJAhhCzNDT6GCuf2/k3wUA9uBkAQwlbOit1/qydgGAUZw2gKHEDr31Wl/WLgAwitMGMJTY
obde68vaBQBGcdoAhhI7jHJnrdWf/fR3AAB8yskDGEr4MMqdtVZ/9tPfAQDwKScP4DECiFGurjVr
EgBI4DQCPEYUMcrVtWZNAgAJnEaAx4giRrm61qxJACCB0wjwuCOOBBK9nK2vuu7Ovg8A8BSnEuBx
QoneztZXXXdn3wcAeIpTCfA4ocQoda1ZcwBAKicU4HGiiVHqWrPmAIBUTijA40QTo9S1Zs0BAKmc
UIAo4olWaoxbVwDATJxagCiCilZqoFtXAMBMnFqASOKKT9W1Yw0BADNyegEiiSw+VdeONQQAzMjp
BYgksvhUXTvWEAAwI6cXIJ7Y4ieiHABYiRMNEE+A8ROhDgCsxIkGiCfAqGqUWxsAwIqcboB4Yoyq
Brq1AQCsyOkGiCfGqGqgWxsAwIqcboBpCLO9mXsAYBdOPMA0hPrezD0AsAsnHmBKom1tx/zWCwBg
F04+wJTE29pqoJtrAGA3Tj7AlMTb2mqgm2sAYDdOPsCUxNt6apSbXwBgZ05BwJSE3HpqoJtfAGBn
TkHA1ETdnOq8mT8AgD85GQFTE3pzqvNm/gAA/uRkBExN6M2pzpv5AwD4k5MRsAzBl6+GufkCADjn
hAQsQ/jlq4FuvgAAzjkhAcsRgVnMBwDAe5yagOUIwyzmAwDgPU5NwHKEYRbzAQDwHqcmYDnC8Dl1
7M0BAMBnnKCA5YjE59SxNwcAAJ9xggKWJhbHMM4AAO04VQFLE5BjGGcAgHacqoClCcgxjDMAQDtO
VcAWjpAUk/fVsTSmAADtOV0BWxCV7dSxNKYAAO05XQFbEJX31PEzjgAAfTlpAVsQmPfU8TOOAAB9
OWkBWxCY99TxM44AAH05aQHbEZrXGSsAgPGcvoDtiM/rjBUAwHhOX8C2jggVov+vjodxAQB4jlMY
sC1B+qc6HsYFAOA5TmHAtgTpn+p4GBcAgOc4hQH8Y9cwFeUAAHmczAD+IdS9DgAAUjiZAfxjh1it
Ub7D5wUAmJVTGsA/dgjXGug7fF4AgFk5pQH8Y4dwrYG+w+cFAJiVUxpAsWLEinIAgLk4uQEUQh0A
gKc5uQG8MHPgHvcu0AEA5uMEB/CCUAcA4AlOcAAvCHUAAJ7gBAfwwiyhW6N8lnsGAOA1pzlgG++G
7CzRWz/XLPcMAMBrTnPANs6C9tf1k3f+7UiJ9wQAwH1OeMA2anC/us789P2nJN4TAAD3OeEB2/ga
tsd/v7oOZ19LkHhPAADc54QHbOO7sD2+9+o6fP3vUeq9PHUPAACM4aQHbONq4NYYfnWNlnAPAACM
4aQHbOOTwK1hfHb1NOrvAACQxekP2Mbd6K3hfHa11vN3AwCQy+kP2EaL6K3x/OpqpcfvBAAgn9Mf
sI2W0Vsj+rvrqjs/CwDAWpwEgW20DOBXQV2//vX6zrv/HgCAdTkJAtvoFcCvfu/x9bPr8PW/AQDA
6RDYRq8o/un3Ht//7gIAgIPTIbCNXlH8zu89/u2rCwAAnAqBbfSO4avBXf/ddxcAAHtyEgS20TuA
r0b22b+rXzu7AADYh9MfsI3e0XsW1vVrX7/3ytnP1AsAgLU58QHb6B26ZzFdv/b1e1ec/Xy9AABY
j1MesI3ecXsW0PVrX7/3jrPfc1wAAKzFCQ/YxsiwbfG3jt9xdgEAsC6nPWAbIyP30791/NyrCwCA
9Tn1AdtIjt0a418vAAD24gQIbCMtfGuMf70AANiX0yCwjYQIrjH+9QIAgF+cDIFtPBXENcbPLgAA
qJwQgW2MDOMa4mcXAAC84rQIbGNEJNcY/3oBAMAVTo7ANnoFc43xrxcAALzLKRLYRst4rjH+9QIA
gDucKIFt3A3pGuNnFwAAtOBkCWzj06CuMf71AgCA1pwygW28E9c1xr9eAADQkxMnsI2fQrvG+NcL
AABGcfoEtnEW3TXGzy4AABjNKRTYxlmIn10AAPAkJ1JgG2dRflwAAJDC6RTYhjgHAGAGTqrANsQ5
AAAzcGoFAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcA
AIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAA
AIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAA
CCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAg
iFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAg
Qh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIII
dQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLU
AQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAH
AACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0A
AACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAA
AAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAA
IIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACA
IEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACC
CHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi
1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQ
BwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEId
AAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEAACCIUAcAAIAgQh0AAACCCHUA
AAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIIhQBwAAgCBCHQAAAIIIdQAAAAgi1AEA
ACCIUAcAAIAgQh0AAACCCHUAAAAIItQBAAAgiFAHAACAIEIdAAAAggh1AAAACCLUAQAAIMbff/8f
XlkIqU+iRhoAAAAASUVORK5CYII=

</figure>
<init>
public class RotateSquares {

    // write your code here

    public static void main(String[] args) {
        // test your code here
    }

    public static void square(Turtle t, double length){
    }

    public static void row(Turtle t, double length, int numSquares, double angle){
    }

}
</init>
<answer>
public class RotateSquares {

    // write your code here

    public static void main(String[] args) {
        Turtle t = new Turtle();
        row(t, 50, 4, 35);
    }

    public static void square(Turtle t, double length){
        for(int i = 0; i<4; i++){
            t.forward(length);
            t.left(90);
        }
    }

    public static void row(Turtle t, double length, int numSquares, double angle){
        t.left(angle);
        for(int i = 0; i<numSquares; i++){
            square(t, length);
            t.forward(length);
        }
        t.backward(numSquares*length);
        t.right(angle);
    }

}
</answer>
</question>

*/
