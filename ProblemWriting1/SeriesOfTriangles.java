public class SeriesOfTriangles {

  public static void main(String[] args){
    //defining variables
    Turtle Raph = new Turtle();
    triangle(Raph, 100);

  }

  //draw an equilateral triangle when given a turtle and a side length
  public static void triangle(Turtle t, double sideLength){
    for(int i = 0; i < 3; i++){
      t.forward(sideLength);
      t.left(120);
    }
    t.penup();
    t.forward(sideLength);
    t.pendown();
    for(int j = 0; j<3; j++){
      t.forward(2*sideLength);
      t.left(120);
    }
    t.penup();
    t.forward(2*sideLength);
    t.pendown();
    for(int h = 0; h < 3; h++){
      t.forward(sideLength);
      t.left(120);
    }
    t.penup();
    t.backward(3*sideLength);
  }
}

/*

<question>
<title>Series of Triangles</title>
<type>JavaCode</type>
<points>2</points>
<text>
Write a method to draw a series of three equilateral triangles, with the middle triangle being the largest. The triangles should all be on the same horizontal plane, and it is not necessary to leave gaps between triangles, so long as each one is separate from the others. After the triangles are drawn, the turtle should return to it's original location. This is an example where the outside triangles have side lengths of 100, and the middle has a side length of 200.
</text>
<figure>
iVBORw0KGgoAAAANSUhEUgAABQUAAAMQCAYAAACeywMSAAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAJOgAACToAYJjBRwAACq4SURBVHhe7djbcuvIlQVA//9P26FWo5vWASGA
BdRlr8wIPIxsmjxV+4JZ//kvAAAAABBFKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgA
AAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBG
KAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAA
ABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSC
AAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAA
YYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgA
AAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBG
KAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAA
ABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSC
AAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAA
YYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgA
AAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBG
KAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAA
ABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSCAAAAABBGKAgAAAAAYYSC
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
mHkQvA6qnw8AAADAEekBHJgtZHsN/n4+AAAAAGdJEuDADIHba/D38wEAAAD4hFQBDowK316Dv70H
AAAAoIV0AQ70DOFeQ7+9BwAAAOAukgY40COQew3+fj4AAAAAT5A6wIGnwrnX4O/nAwAAAPA0CQQc
uDOoew3+fj4AAAAAPUkj4EBraPca/O09AAAAACNIJeDAp+Hda/D38wEAAAAYTUIBB64Eea/B388H
AAAAYCbSCjjwW6j3Gvz9fAAAAABmJbmAA3sB32vwt/cAAAAAzE6CAQf2Qr+9BwAAAGAl0gw4sBcA
bg8AAADAqiQbcEAQCAAAAFQk5YADgkAAAACgIokHAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABA
GKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIA
AABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQR
CgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAA
AIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEg
AAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABA
GKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIA
AABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQR
CgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAA
AIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEg
AAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABA
GKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIA
AABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQR
CgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAA
AIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEg
AAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABA
GKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIA
AABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQR
CgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAA
AIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEg
AAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABA
GKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIA
AABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQR
CgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAA
AIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEg
AAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABA
GKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIA
AABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQR
CgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAAAIQRCgIAAABAGKEgAAAA
AIQRCgIAAABAGKEgAAAAAET573//B8X7vgGOm2eqAAAAAElFTkSuQmCC


</figure>
<init>
public class SeriesOfTriangles {

    // write your code here

    public static void main(String[] args) {
        // test your code here
    }

    public static void triangle(Turtle t, double sideLength){
        //write the method to make a triangle here
    }

}
</init>
<answer>
public class SeriesOfTriangles {

  public static void main(String[] args){
    Turtle Raph = new Turtle();
    triangle(Raph, 100);

  }

  public static void triangle(Turtle t, double sideLength){
    for(int i = 0; i < 3; i++){
      t.forward(sideLength);
      t.left(120);
    }
    t.penup();
    t.forward(sideLength);
    t.pendown();
    for(int j = 0; j<3; j++){
      t.forward(2*sideLength);
      t.left(120);
    }
    t.penup();
    t.forward(2*sideLength);
    t.pendown();
    for(int h = 0; h < 3; h++){
      t.forward(sideLength);
      t.left(120);
    }
    t.penup();
    t.backward(3*sideLength);
  }
}

</answer>
</question>

*/
